/*
Copyright Â© 2023 Miha miha.kralj@outlook.com

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package cmd

import (
	"bufio"
	"fmt"
	"io"
	"os"

	"github.com/beevik/etree"
	"github.com/mihakralj/opnsense/internal"
	"github.com/spf13/cobra"
)

var execute bool

// compareCmd represents the compare command
var importCmd = &cobra.Command{
	Use:   "import",
	Short: `Import XML patch and stage it for configuraiton change`,
	Long: `The 'import' command allows bulk import of configuration changes by injecting an XML patch file that specifies what to add, or delete in the current configuration. Patch file is in the standard XML format generated by the 'export' command, using namespace tags indicating the type of change (e.g., add:, del:).

The command reads the patch file from the standard input. You can pipe the patch file into this command:

  cat patch.xml | opnsense import

Or insert patch using I/O redirection:

  opnsense import < patch.xml

Once the patch is imported, it is added to currently staged changes in 'staging.xml'. You can review these changes using 'opnsense compare -c'  and apply them using 'opnsense commit' when ready.`,

	Run: func(cmd *cobra.Command, args []string) {
		internal.SetFlags(verbose, force, host, configfile, nocolor, depth, xmlFlag, yamlFlag, jsonFlag)

		patchdoc := etree.NewDocument()

		stat, _ := os.Stdin.Stat()
		if (stat.Mode() & os.ModeCharDevice) == 0 {
			reader := bufio.NewReader(os.Stdin)
			var output []rune

			for {
				input, _, err := reader.ReadRune()
				if err != nil && err == io.EOF {
					break
				}
				output = append(output, input)
			}
			err := patchdoc.ReadFromString(string(output))
			if err != nil {
				internal.Log(1, "received stdin is not in XML format")
			}

		} else {
			internal.Log(1, "No data received on stdin, please pipe the XML file into this command")
		}

		internal.Checkos()
		configdoc := internal.LoadXMLFile(configfile, host, false)
		stagingdoc := internal.LoadXMLFile(stagingfile, host, true)
		if stagingdoc == nil {
			stagingdoc = internal.LoadXMLFile(stagingfile, host, true)
		}

		internal.PatchElements(patchdoc.Root(), stagingdoc)
		deltadoc := internal.DiffXML(configdoc, stagingdoc, false)

		if !execute {
			fmt.Println("Preview of modifications scheduled for imported into staging.xml:")
		}
		internal.PrintDocument(deltadoc, "opnsense")

		if execute {
			internal.SaveXMLFile(stagingfile, stagingdoc, host, true)
			fmt.Println("\nModifications imported into staging.xml")
		}
	},
}

func init() {
	importCmd.Flags().IntVarP(&depth, "depth", "d", 1, "Specifies number of depth levels of returned tree (default: 1)")
	importCmd.Flags().BoolVarP(&execute, "execute", "e", false, "Apply the changes to the staging.xml, rather than just previewing them.")
	rootCmd.AddCommand(importCmd)
}
