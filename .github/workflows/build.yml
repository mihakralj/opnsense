name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  linuxwindows:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    name: Ubuntu runner for Linux and Windows
    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          check-latest: true

      - name: Check out code
        uses: actions/checkout@v3

      - name: Install prereqs
        run: sudo apt-get install build-essential devscripts debhelper dh-make
        shell: bash

      - name: Extract version from Makefile
        id: extract_version
        run: |
          VERSION=$(awk -F '=' '/^VERSION/ {print $2}' Makefile)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "::set-output name=version::${VERSION}"
        shell: bash

      - name: Build Windows binary
        env:
          GOOS: windows
          GOARCH: amd64
        run: |
          go build -ldflags "-s -w -X cmd.Version=${{ env.VERSION }}" -o ./opnsense.exe

      - name: Build macoOS binary
        env:
          GOOS: darwin
          GOARCH: amd64
        run: |
          go build -ldflags "-s -w -X cmd.Version=${{ env.VERSION }}" -o ./opnsense-mac

        #need to sign and notarize this binary

      - name: Build Linux binary
        env:
          GOOS: linux
          GOARCH: amd64
        run: |
          go build -ldflags "-s -w -X cmd.Version=${{ env.VERSION }}" -o ./opnsense-linux

      - name: package linux binary into .deb
        run: |
          mkdir -p opnsense/DEBIAN && mkdir -p opnsense/usr/local/bin
          cp ./opnsense-linux opnsense/usr/local/bin/opnsense
          echo -e "Package: opnsense\nVersion: ${VERSION}\nSection: base\nPriority: optional\nArchitecture: amd64\nMaintainer: Miha Kralj <miha.kralj@outlook.com>\nDescription: opnsense is a command-line utility for managing, configuring, and monitoring OPNsense firewall systems. It facilitates non-GUI administration, both directly in the shell and remotely via an SSH tunnel. All interactions with OPNsense utilize the same mechanisms as the Web GUI, including staged modifications of config.xml and execution of available configd commands." > opnsense/DEBIAN/control
          dpkg-deb --build opnsense
        shell: bash

      - name: Upload all artifacts
        uses: actions/upload-artifact@v3
        with:
          name: bin
          path: |
            ./opnsense.deb
            ./opnsense.exe
            ./opnsense-mac

  macbsd:
    runs-on: macos-12
    name: MacOS runner with FreeBSD virtualbox
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Extract version from Makefile
      id: extract_version
      run: echo "VERSION=$(awk -F '=' '/^VERSION/ {print $2}' Makefile)" >> $GITHUB_ENV
      shell: bash

    - name: Compile in FreeBSD
      id: compile
      uses: vmactions/freebsd-vm@v0.3.1
      with:
        envs: 'VERSION=${{ env.VERSION }}'
        usesh: true
        prepare: |
          pkg install -y curl wget
          name=$(curl -s https://go.dev/dl/ | grep 'freebsd-amd64' | sed -n 's/.*href="\([^"]*\)".*/\1/p' | head -n 1 | xargs basename)
          wget -q "https://dl.google.com/go/$name"
          tar -C /usr/local -xzf "$name"
        run: |
          mkdir ~/.gopkg
          export GOPATH=/root/.gopkg
          export PATH=$PATH:/usr/local/go/bin:/root/.gopkg/bin
          mkdir -p /Users/runner/work/opnsense-cli/opnsense-cli/work-dir/usr/local/bin
          go build -gcflags='-trimpath' -ldflags="-s -w -X cmd.Version=${VERSION}" -o /Users/runner/work/opnsense-cli/opnsense-cli/work-dir/usr/local/bin/opnsense opnsense.go
          cp /Users/runner/work/opnsense-cli/opnsense-cli/work-dir/usr/local/bin/opnsense /usr/local/bin/opnsense
          checksum=$(sha256 -q /Users/runner/work/opnsense-cli/opnsense-cli/work-dir/usr/local/bin/opnsense)
          flatsize=$(stat -f%z /Users/runner/work/opnsense-cli/opnsense-cli/work-dir/usr/local/bin/opnsense)
          echo "/usr/local/bin/opnsense: ${checksum}" > /Users/runner/work/opnsense-cli/opnsense-cli/sha256checksum
          echo "/usr/local/bin/opnsense" > /Users/runner/work/opnsense-cli/opnsense-cli/plist
          echo -e "name: opnsense-cli\nversion: ${VERSION}\norigin: net-mgmt/opnsense-cli\ncomment: \"CLI to manage and monitor OPNsense firewall configuration, check status, change settings, and execute commands.\"\ndesc: \"opnsense is a command-line utility for managing, configuring, and monitoring OPNsense firewall systems. It facilitates non-GUI administration, both directly in the shell and remotely via an SSH tunnel. All interactions with OPNsense utilize the same mechanisms as the Web GUI, including staged modifications of config.xml and execution of available configd commands.\"\nmaintainer: \"miha.kralj@outlook.com\"\nwww: \"https://github.com/mihakralj/opnsense-cli\"\nabi: \"FreeBSD:12:amd64\"\narch: \"freebsd:12:x86:64\"\nosversion: 1201000\nprefix: /usr/local\nflatsize: ${flatsize}" > /Users/runner/work/opnsense-cli/opnsense-cli/manifest
          echo -e "files: {\n  \"/usr/local/bin/opnsense\": \"${checksum}\",\n}" >> /Users/runner/work/opnsense-cli/opnsense-cli/manifest
          pkg create -M /Users/runner/work/opnsense-cli/opnsense-cli/manifest -p /Users/runner/work/opnsense-cli/opnsense-cli/plist -o /Users/runner/work/opnsense-cli/opnsense-cli
          xz -k -c *.pkg >opnsense.txz


    - name: Upload all artifacts
      uses: actions/upload-artifact@v3
      with:
        name: bin
        path: ./opnsense*.txz

  release:
    needs: [linuxwindows, macbsd]
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: .

      - name: list downloaded files
        run: ls -af ./bin
        shell: bash

      - name: Create Release and Upload Assets
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          tag_name: ${{ env.VERSION }}
          name: opnsense-cli ${{ env.VERSION }}
          files: |
            ./bin/opnsense.deb
            ./bin/opnsense.exe
            ./bin/opnsense.txz
            ./bin/opnsense-mac
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.linuxwindows.outputs.version }}
